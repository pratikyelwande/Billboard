/*============== EXTENSIONS & CLEANUP ==============*/
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
DROP TABLE IF EXISTS locality;  -- Remove obsolete table

/*============== CORE TABLES ==============*/
-- Security Roles
CREATE TABLE roles (
    role_name VARCHAR(50) PRIMARY KEY
);

-- Document Storage
CREATE TABLE documents (
    document_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    document TEXT
);

-- User Accounts
CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    firstname VARCHAR(100),
    lastname VARCHAR(100),
    gender VARCHAR(50),  -- Changed from enum to VARCHAR
    phoneno VARCHAR(15),
    phone_verified BOOLEAN DEFAULT FALSE,
    company_name VARCHAR(255),
    is_verified BOOLEAN DEFAULT FALSE,
    locality VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    role_name VARCHAR(50) NOT NULL DEFAULT 'Admin' REFERENCES roles(role_name) ON DELETE SET DEFAULT,
    document_id UUID REFERENCES documents(document_id) ON DELETE SET NULL,
    CHECK (phoneno ~ '^\+?[0-9]{10,15}$')
);

/*============== BILLBOARD SYSTEM ==============*/
-- Billboard Listings
CREATE TABLE billboard (
    billboard_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    size VARCHAR(50) NOT NULL,
    location TEXT NOT NULL,
    billboard_type VARCHAR(50) NOT NULL,
    price NUMERIC(10, 2) NOT NULL,
    available BOOLEAN DEFAULT TRUE,
    amenities TEXT,
    b_img TEXT,
    b_review TEXT,
    b_description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    owner_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE
);

-- Booking System
CREATE TABLE booking (
    booking_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    billboard_id UUID NOT NULL REFERENCES billboard(billboard_id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    offered_price NUMERIC(10, 2) NOT NULL,
    status VARCHAR(10) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

/*============== SYSTEM INITIALIZATION ==============*/
-- Default Roles
INSERT INTO roles (role_name) VALUES
    ('User'),
    ('Admin'),
    ('Owner');

/*============== AUTOMATION ==============*/
-- Universal Update Trigger
CREATE OR REPLACE FUNCTION update_timestamp()
    RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply to All Tables
CREATE TRIGGER users_update
    BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER billboard_update
    BEFORE UPDATE ON billboard FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER booking_update
    BEFORE UPDATE ON booking FOR EACH ROW EXECUTE FUNCTION update_timestamp();

/*============== OPTIMIZATION ==============*/
-- Essential Indexes
CREATE INDEX users_location_idx ON users(locality);
CREATE INDEX billboard_price_idx ON billboard(price);
CREATE INDEX booking_dates_idx ON booking USING BRIN (start_date, end_date);